1 Injection
Vulnerability Name:
PDF-Based Cross-Site Scripting (XSS) via File Upload

Security Issue:
Insecure File Upload and Improper Sanitization

Vulnerability Description:
The vulnerability occurs because the application allows users to upload PDF files without properly validating or sanitizing the content of those files. This enables an attacker to embed malicious scripts or payloads within the PDF. When the PDF is later opened and rendered in a web browser or a PDF viewer that supports executing embedded scripts, the malicious code executes, leading to potential XSS attacks.

Impact:
Malicious scripts can be executed in the context of the victim’s browser, potentially leading to unauthorized actions or data theft.

Mitigation:
File Type Validation: Ensure that the file type is strictly validated both on the client side and server side. Even if the file is labeled as a PDF, it should be checked to confirm that it adheres to the expected format and does not contain any unexpected content.
Content Filtering: Implement thorough content filtering for uploaded files. Even if a file is valid, its content should be inspected for malicious scripts or payloads.
Sanitization: Ensure that any content that is rendered from uploaded files is properly sanitized to prevent the execution of embedded scripts.
Use of Secure PDF Renderers: If possible, use a PDF rendering library or tool that is designed to be secure and prevents the execution of embedded scripts.

2  IDOR
Vulnerability Name:
Insecure Direct Object Reference (IDOR) with Profile Picture Update

Security Issue:
Unrestricted Profile Picture Update

Vulnerability Description:
In the application, the profile picture update feature is not intended to be accessible by vendor users. However, through the manipulation of crafted request, a vendor user is able to update their profile picture despite the absence of a user interface feature for this action. This indicates that the application might be allowing unauthorized operations due to inadequate access control mechanisms.

Impact:
Unauthorized Access: Vendor users can perform actions that they should not be allowed to, such as updating their profile picture. This could lead to unauthorized data changes or exposure of sensitive user profiles.

Mitigation:
Implement Proper Access Controls: Ensure that access to profile picture update functionality is restricted based on user roles and permissions. Validate that only authorized users can access and perform profile updates.
Enforce Validation and Authorization Checks: Ensure that all endpoints handling sensitive operations are properly validated and have appropriate authorization checks. Use role-based access control (RBAC) or other security mechanisms to enforce these checks.
Use Secure APIs: Ensure that API endpoints for user profile management are secure and validate the authenticity of requests. Consider implementing additional layers of security, such as authentication tokens or session validation.


3 Security Misconfiguration
Vulnerability Name:
Unintended Profile Picture Upload Feature Exposure

Security Issue:
Unauthorized Feature Exposure

Vulnerability Description:
The application has a profile picture upload feature that should not be available to Pioneer users. However, this feature is present and accessible both on the frontend and backend for these users. This exposure suggests that either the feature was not correctly restricted based on user roles or that there are residual elements in the codebase that were not properly disabled.

Impact:
Unauthorized Feature Access: Pioneer users, who should not have the ability to upload profile pictures, can access and use this functionality, potentially causing misuse.

Mitigation:
Remove Profile Picture Uplaod Fucntionality to Pioneer User

4 Broken Authentication
Vulnerability Name:
Improper Token Handling and Replay Vulnerability

Security Issue:
Token Reuse for Multiple Requests

Vulnerability Description:
The application uses .ASPXAUTH tokens and request verification tokens to validate user requests. However, these tokens can be reused across multiple requests, which is a significant security flaw. Tokens intended for single-use are being used repeatedly, making the system susceptible to replay attacks and potentially allowing unauthorized actions.

Impact:
An attacker who intercepts or acquires a valid token can reuse it to perform unauthorized actions.

Mitigation:
Ensure Token Uniqueness.
Expiry Mechanism: Set appropriate expiration times for tokens to limit their validity period. Tokens should automatically expire after a predefined time or after their intended use.
Invalidate Tokens: Ensure that tokens are invalidated after use, especially for sensitive operations. This includes server-side checks to prevent the reuse of tokens.

5 Broken Authentication
Vulnerability Name:
Cookie Injection and Session Hijacking

Security Issue:
Insecure Cookie Management

Vulnerability Description:
Users are able to set their own cookies, and the server accepts these cookies without proper validation. This allows users to manipulate or inject cookies, potentially gaining unauthorized access to the application and its entire session.

Impact
Cookie Tampering

Mitigation:
Implement Cookie Validation and Integrity Checks:
Server-Side Validation: Ensure that all cookies are validated server-side before being accepted. This includes checking that the cookies are properly signed and have not been tampered with.

6 Security Misconfiguration
Vulnerability Name:
Session Timeout Synchronization Issue

Security Issue:
Misconfiguration at Login 2FA 

Vulnerability Description:
The session timeout mechanism may inadvertently align with the OTP resend timer, potentially leading to an insecure user experience or unintended consequences. Users may be unable to request a new OTP because their session has expired, leading to either a denial of access or the need to start the authentication process over.

Impact
If the session expires during the OTP process, users may need to re-initiate the authentication process from scratch. This can lead to an increased number of authentication attempts, which might have implications for the security and performance of the authentication system.

Mitigation
Instead of redirecting to login page application hat to remain at 2FA page & allow user to access resend otp feature.

7 Insecure Design
Vulnerability Name:
Inconsistent Notification Issue

Security Issue:
Inconsistent or misleading email notifications can cause confusion and potentially lead to trust issues with the application. Users might be confused about the actual state of their account. Additionally, if users are receiving conflicting messages, it could be indicative of underlying issues in the application's notification system or user account management.

Vulnerability Description:
When an admin activates a user account, the user receiving two conflicting emails:
Account Activation Email: Confirms that the user's account has been successfully activated.
Account Removal Email: Indicates that the user’s account has been removed, which contradicts the activation notification.

Impact
User Confusion.
If users are receiving conflicting messages, it could be indicative of underlying issues in the application's notification system or user account management.

Mitigation:
Review Notification Code, Test Event Handlers, Check Templates.
Update Configuration: Make sure that the system’s email configuration aligns with the expected notification workflow.
