This is a critical authentication & authorization flaw. You successfully bypassed an account deactivation control enforced by backend policy by abusing the account lockout and self-service unlock mechanism in the frontend app, resulting in unauthorized reactivation of deactivated users.

Below is a complete reporting structure for this security finding:


---

üîç Finding Name:

Improper Account State Enforcement Leading to Unauthorized Reactivation of Deactivated Accounts


---

üìÑ Summary:

The application fails to enforce backend user deactivation policies consistently across both internal (admin) and external (frontend) components. By intentionally triggering account lockout on a deactivated user and later leveraging the self-service account unlock flow, an attacker can reactivate a deactivated account without backend/admin intervention, violating company policy and compromising user management integrity.


---

üßæ Description:

During testing, it was observed that accounts deactivated via the internal backend application (per company policy) could be reactivated through a misconfigured self-service unlock flow available on the frontend application.

Steps to reproduce:

1. A user account was deactivated in the backend system by internal administrators (e.g., due to inactivity, termination, or other policy reasons).


2. Attempting to log in with correct or incorrect credentials resulted in the message: "Account is deactivated. Please contact administrator." ‚Äî confirming the deactivation.


3. By deliberately entering invalid credentials multiple times (typically 3), the application displayed a lockout message instead: "Your account is locked."


4. The frontend unlock mechanism then allowed initiating an unlock flow (e.g., via email or OTP).


5. After waiting the required lockout duration (e.g., 24 hours), a user was able to complete the unlock process, reset their password, and regain access.


6. Upon reviewing the backend user management system, the account status was found to have changed from inactive to active, effectively bypassing administrative control.



This indicates a lack of state validation during the unlock process and inconsistent enforcement of deactivation rules across application components.


---

‚ö†Ô∏è Impact:

Security Policy Bypass: Deactivated accounts, possibly disabled for security or compliance reasons, can be reactivated without authorization.

Unauthorized Access: Previously disabled users (e.g., ex-employees) could potentially regain access.

Privilege Escalation Risk: If deactivated users held elevated privileges, they might regain sensitive access.

Data Integrity Risk: Unauthorized users might tamper with or access confidential information.

Compliance Violation: Violates policies requiring administrative control over account lifecycle management.



---

üõ†Ô∏è Remediation:

Strictly enforce account state checks during all authentication and unlock/reset flows.

The unlock mechanism must verify the account is in an active state before allowing password resets or unlocking.

Implement a centralized user status validation layer shared by both backend and frontend components.

Introduce audit logging for all unlock/reset actions, including account state before and after the action.

Consider disabling self-service unlock/reset flows for deactivated users altogether ‚Äî redirect them to contact support/admin instead.



---

üìö References:

OWASP Broken Access Control

OWASP Authentication Cheat Sheet



---

Let me know if you want to add POC screenshots or HTTP request samples to support this finding for a formal report.

