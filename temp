Vulnerability Description:

The application suffers from Vertical Privilege Escalation and Horizontal Privilege Escalation due to insufficient access control mechanisms.

1. Vertical Privilege Escalation:
Lower-privileged users (e.g., ESG Focal Point) can escalate privileges to higher-level roles like Admin by manipulating parameters such as user_id in requests via browser developer tools (Inspect Element). This allows unauthorized access to critical functionalities like user management.


2. Horizontal Privilege Escalation:
Users with the same role (e.g., ESG Focal Point) can access, modify, delete, or assign data belonging to other users of the same role by manipulating identifiers (e.g., user_id or data_id) in API requests or URLs. This indicates a lack of proper authorization checks to ensure users can only interact with their own data.




---

Remediation Recommendations:

1. Implement Robust Access Control Mechanisms:

Use Role-Based Access Control (RBAC) to define and enforce access permissions based on user roles.

Ensure all API endpoints validate the userâ€™s role and permissions before processing the request.



2. Parameter Validation:

Validate and sanitize all user-controlled input on the server side to prevent manipulation of identifiers like user_id or data_id.

Use session or token-based mechanisms to link the request to the authenticated user's identity.



3. Object-Level Authorization Checks:

Implement Object-Level Access Control by verifying that the authenticated user has the necessary permissions to access or modify the requested resource.

For example:

Check if the user_id in the request matches the authenticated user's ID for personal data.

Enforce role-specific restrictions for sensitive actions.




4. Least Privilege Principle:

Assign minimum privileges necessary for each user role.

Limit admin functionalities (like user management) strictly to Admin users.



5. Session Management:

Use secure session management practices such as generating unique session tokens.

Associate the token with user-specific permissions on the backend.



6. Audit and Logging:

Log access to sensitive operations, including failed attempts.

Regularly review logs to detect unauthorized activities.



7. Secure Frontend Code:

Avoid exposing sensitive identifiers like user_id in frontend code.

Use unique, server-generated tokens or IDs to identify resources instead of predictable user IDs.



8. Penetration Testing:

Conduct regular security assessments to identify and address privilege escalation vulnerabilities.

Include both vertical and horizontal privilege escalation scenarios in test cases.




By addressing these issues, the web application can ensure robust access control and mitigate the risks associated with privilege escalation vulnerabilities.

